{"pages":[],"posts":[{"title":"Hello World","text":"失败的可以使用yarn代替npm","link":"/hexo/2019/09/29/hello-world/"},{"title":"mysql基础","text":"mysql基本操作 创建数据库123create database test ; -- 默认方式创建数据库create database test character set utf8; -- 指定字符集创建数据库 用户管理用户管理对应mysql.user表，修改对应数据库即可 1234567891011121314151617-- 新增用户GRANT ALL PRIVILEGES on test.* to test@localhost IDENTIFIED by &apos;test&apos;;-- 查看用户权限SHOW GRANTS FOR test@localhost;-- 增加用户权限GRANT INSERT on test.* to test@localhost;-- 减少用户权限REVOKE INSERT on sdgx.* from test@localhost;-- 删除用户DELETE FROM user WHERE user=&apos;test&apos; AND WHERE host=&apos;localhost&apos;;-- 忘记mysql root账户密码（linux）systemctl stop mysql -- 关闭mysqlmysqld --skip-grant-tables -- 跳过校验-- 修改密码pkill mysqld -- 杀掉进程systemctl restart mysql -- 重启mysql 范式 1-NF 第一范式表中所有字段都是不可分割的原子集。(比如：地址可以拆分为省、市、县，将其拆开三个字段则满足第一范式，否则不满足)。 2-NF 第二范式首先满足第一范式，每一列（除主键）都完全依赖与主键。（使用联合主键，某一列仅对联合主键的其中部分主键构成依赖，则不满足第二范式） ####3-NF 第三范式 首次满足第二范式，除主键外其特列不能有传递依赖关系（即除主键外其它列不对任一列构成依赖关系） 创建数据表 1234567891011121314151617181920212223242526272829303132333435create table user( ID int(11), name varchar(20), sex char(1), birth DATE); -- 创建数据库表并指明列名与数据大小create table user( ID int(11) not null COMMENT &quot;主键&quot;， -- 不可为空，备注主键 name varchar(20) null COMMENT &quot;姓名&quot;, -- 可为空，备注姓名 sex char(1) not null COMMENT &quot;性别&quot;， -- 不可为空，备注性别 birth DATE COMMENT &quot;生日&quot;, -- 默认可为空，备注生日 PRIMARY KEY(ID) -- 设置ID为主键);-- 修改字段属性(添加自增约束)ALTER TABLE user MODIFY COLUMN ID int(10) NOT NULL AUTO_INCREMENT COMMENT &apos;主键&apos;；-- 删除主键约束ALTER TABLE user DROP PRIMARY KEY;-- 查看表字段信息DESCRIBE user;(简写：DESC user;)-- 添加唯一约束ALTER TABLE user ADD UNIQUE(id);//创建表时添加参考主键；-- 删除唯一约束ALTER TABLE user DROP INDEX id;-- 修改默认约束ALTER TABLE user MODIFY COLUMN sex char(1) default &apos;M&apos; not null;-- 添加列ALTER TABLE user ADD COLUMN test varchar(20);-- 删除列ALTER TABLE user DROP COLUMN test;-- 外键(外键所链接的列必须为主键)create table u_order(id int(11), W_id int(11),foreign key(w_id) references user(id));-- 数据类型int(11) -- 表示占用一个int（4字节）,显示长度10位，头默认填充0，超过会截断 插入数据 12345-- 插入一条数据INSERT INTO user (id,name,sex,birth) value (&apos;1&apos;,&apos;test&apos;,&apos;M&apos;,now());-- 插入多条数据INSERT INTO user (id,name,sex,birth) value (&apos;2&apos;,&apos;test2&apos;,&apos;S&apos;,now()),(&apos;3&apos;,&apos;test3&apos;,&apos;M&apos;,now()); 修改数据1UPDATE user SET id=1 WHERE id=2; 删除数据1DELETE FROM user WHERE id=1;-- 删除user表id为1的数据 查询123456789101112-- 连表查询select * from user,u_order where user.id=U_order.W_id;-- 子查询select * from user where id in (select W_id from u_order);-- 求并集(列数应该相同)select id from user union select id from u_order;-- 查询结果排序(desc:倒序)select id from user order by id desc;-- 查询指定区间的数据select * from user limit start,length;-- 分组聚合查询select count(number) from user group by name; 事务事务是最小的不可分割的工作单元,事务能保证一个业务的完整性。 事务的特征ACID： A:atomicity:原子性:事务是最小执行单位，不可分割 C:consistency: 一致性:事务要求，同一事务中SQL语句，必须同时成功或者失败。 I:isolation: 隔离性:事务1和事务2之间具有隔离性。 D:durability:持久性:事务一旦结束不可以回滚 //关闭mysql自动提交 12345678set autocommit=0;-- 手动提交事务commit；-- 手动回滚rollback；-- 手动开启事务begin;start transaction; 事务隔离级别： read uncommitted; 读未提交的 不加锁一般不用 read committed; 读已提交的 读不加锁，添加、修改、删除需要加锁 repeatable read; 可重复读 MySQL通过版本控制（MVCC）实现读不加锁，不通过MVCC实现需要加读锁 serializanle 串行化 所有读写均加锁 查看数据库隔离级别 12345678910111213141516-- 查看数据库全局隔离级别select @@global.transaction_isolation;select @@global.tx_isolation; -- mariadb或mysql5.*-- 查看数据会话级隔离级别select @@transaction_isolation;select @@tx_isolation; -- mariadb或mysql5.*-- 修改数据库隔离级别set global transaction isolation level read uncommitted;-- 全局set transaction isolation level read uncommitted; -- 会话级别-- 读未提交，可能由于事务回滚造成脏读set global transaction isolation level read committed;-- 读已提交，可能不可重复读（另一事务修改数据之后，另一事务内多次读同一表数据的值不同）set global transaction isolation level repeatable read;-- 重复读，可能发生幻读（另一事务提交的数据，不能在事务结束前被其它事务获取）set global transaction isolation level serializable;-- 串行化 ，另一操作该表的事务阻塞，可能死锁（mysql自带死锁检查）； 索引12//创建索引 索引名前缀 idx_create index idx_user_name on user(name);","link":"/hexo/2019/10/01/mysql基础/"}],"tags":[{"name":"mysql","slug":"mysql","link":"/hexo/tags/mysql/"},{"name":"mariadb","slug":"mariadb","link":"/hexo/tags/mariadb/"},{"name":"基础","slug":"基础","link":"/hexo/tags/基础/"},{"name":"增删改查","slug":"增删改查","link":"/hexo/tags/增删改查/"},{"name":"用户管理","slug":"用户管理","link":"/hexo/tags/用户管理/"},{"name":"事务","slug":"事务","link":"/hexo/tags/事务/"},{"name":"索引","slug":"索引","link":"/hexo/tags/索引/"}],"categories":[]}